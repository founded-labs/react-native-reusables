{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "select",
  "type": "registry:ui",
  "title": "Select",
  "author": "@mrzachnugent",
  "description": "Displays a list of options for the user to pick fromâ€”triggered by a button.",
  "dependencies": [
    "@rn-primitives/select"
  ],
  "registryDependencies": [
    "https://reactnativereusable.com/r/new-york/text.json",
    "https://reactnativereusable.com/r/new-york/icon.json"
  ],
  "files": [
    {
      "path": "./node_modules/@rnr/registry/src/new-york/components/ui/select.tsx",
      "content": "'use client';\n\nimport { Icon } from '@/registry/new-york/components/ui/icon';\nimport { NativeOnlyAnimatedView } from '@/registry/new-york/components/ui/native-only-animated-view';\nimport { cn } from '@/registry/new-york/lib/utils';\nimport * as SelectPrimitive from '@rn-primitives/select';\nimport { Check, ChevronDown, ChevronDownIcon, ChevronUpIcon } from 'lucide-react-native';\nimport * as React from 'react';\nimport { Platform, StyleSheet, View } from 'react-native';\nimport { ScrollView } from 'react-native-gesture-handler';\nimport { FadeIn, FadeOut } from 'react-native-reanimated';\nimport { TextClassContext } from './text';\n\ntype Option = SelectPrimitive.Option;\n\nconst Select = SelectPrimitive.Root;\n\nconst SelectGroup = SelectPrimitive.Group;\n\nfunction SelectValue({\n  ref,\n  className,\n  ...props\n}: SelectPrimitive.ValueProps & {\n  ref?: React.RefObject<SelectPrimitive.ValueRef>;\n  className?: string;\n}) {\n  const { value } = SelectPrimitive.useRootContext();\n  return (\n    <SelectPrimitive.Value\n      ref={ref}\n      className={cn(\n        'line-clamp-1 flex flex-row items-center gap-2 text-foreground',\n        !value && 'text-muted-foreground',\n        className\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction SelectTrigger({\n  ref,\n  className,\n  children,\n  size = 'default',\n  ...props\n}: SelectPrimitive.TriggerProps & {\n  ref?: React.RefObject<SelectPrimitive.TriggerRef>;\n  children?: React.ReactNode;\n  size?: 'default' | 'sm';\n}) {\n  return (\n    <SelectPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        'border-input dark:bg-input/30 dark:active:bg-input/50 flex flex-row items-center justify-between gap-2 rounded-md border bg-background px-3 py-2 shadow-sm h-9',\n        Platform.select({\n          web: 'focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:hover:bg-input/50 w-fit whitespace-nowrap transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed [&_svg]:pointer-events-none [&_svg]:shrink-0 text-sm',\n          native: 'shadow-black/5',\n        }),\n        props.disabled && 'opacity-50',\n        size === 'sm' && 'h-8 py-1.5',\n        className\n      )}\n      {...props}\n    >\n      <>{children}</>\n      <Icon as={ChevronDown} aria-hidden={true} className='size-4 text-muted-foreground' />\n    </SelectPrimitive.Trigger>\n  );\n}\n\nfunction SelectContent({\n  className,\n  children,\n  position = 'popper',\n  portalHost,\n  ...props\n}: SelectPrimitive.ContentProps & {\n  ref?: React.RefObject<SelectPrimitive.ContentRef>;\n  className?: string;\n  portalHost?: string;\n}) {\n  return (\n    <SelectPrimitive.Portal hostName={portalHost}>\n      <SelectPrimitive.Overlay style={Platform.select({ native: StyleSheet.absoluteFill })}>\n        <TextClassContext.Provider value='text-popover-foreground'>\n          <NativeOnlyAnimatedView className='z-50' entering={FadeIn} exiting={FadeOut}>\n            <SelectPrimitive.Content\n              className={cn(\n                'bg-popover relative z-50 min-w-[8rem] rounded-md border border-border shadow-md',\n                Platform.select({\n                  web: cn(\n                    'animate-in fade-in-0 zoom-in-95 max-h-52 origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto',\n                    props.side === 'bottom' && 'slide-in-from-top-2',\n                    props.side === 'top' && 'slide-in-from-bottom-2'\n                  ),\n                  native: 'p-1 shadow-black/5',\n                }),\n                position === 'popper' &&\n                  Platform.select({\n                    web: cn(\n                      props.side === 'bottom' && 'translate-y-1',\n                      props.side === 'top' && '-translate-y-1'\n                    ),\n                  }),\n                className\n              )}\n              position={position}\n              {...props}\n            >\n              <SelectScrollUpButton />\n              <SelectPrimitive.Viewport\n                className={cn(\n                  'p-1',\n                  position === 'popper' &&\n                    cn(\n                      'w-full',\n                      Platform.select({\n                        web: 'h-[var(--radix-select-trigger-height)]  min-w-[var(--radix-select-trigger-width)]',\n                      })\n                    )\n                )}\n              >\n                {children}\n              </SelectPrimitive.Viewport>\n              <SelectScrollDownButton />\n            </SelectPrimitive.Content>\n          </NativeOnlyAnimatedView>\n        </TextClassContext.Provider>\n      </SelectPrimitive.Overlay>\n    </SelectPrimitive.Portal>\n  );\n}\n\nfunction SelectLabel({\n  className,\n  ...props\n}: SelectPrimitive.LabelProps & {\n  ref?: React.RefObject<SelectPrimitive.LabelRef>;\n}) {\n  return (\n    <SelectPrimitive.Label\n      className={cn('text-muted-foreground px-2 py-1.5 text-xs', className)}\n      {...props}\n    />\n  );\n}\n\nfunction SelectItem({\n  className,\n  children,\n  ...props\n}: SelectPrimitive.ItemProps & {\n  ref?: React.RefObject<SelectPrimitive.ItemRef>;\n}) {\n  return (\n    <SelectPrimitive.Item\n      className={cn(\n        'group active:bg-accent relative flex flex-row w-full items-center gap-2 rounded-sm py-1.5 pr-8 pl-2',\n        Platform.select({\n          web: 'focus:bg-accent focus:text-accent-foreground outline-none cursor-default data-[disabled]:pointer-events-none [&_svg]:pointer-events-none  *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2',\n        }),\n        props.disabled && 'opacity-50',\n        className\n      )}\n      {...props}\n    >\n      <View className='absolute right-2 flex size-3.5 items-center justify-center'>\n        <SelectPrimitive.ItemIndicator>\n          <Icon as={Check} className='text-muted-foreground shrink-0 size-4' />\n        </SelectPrimitive.ItemIndicator>\n      </View>\n      <SelectPrimitive.ItemText className='text-foreground group-active:text-accent-foreground text-sm select-none' />\n    </SelectPrimitive.Item>\n  );\n}\n\nfunction SelectSeparator({\n  className,\n  ...props\n}: SelectPrimitive.SeparatorProps & {\n  ref?: React.RefObject<SelectPrimitive.SeparatorRef>;\n}) {\n  return (\n    <SelectPrimitive.Separator\n      className={cn(\n        'bg-border -mx-1 my-1 h-px',\n        Platform.select({ web: 'pointer-events-none' }),\n        className\n      )}\n      {...props}\n    />\n  );\n}\n\n/**\n * @platform Web only\n * Returns null on native platforms\n */\nfunction SelectScrollUpButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {\n  if (Platform.OS !== 'web') {\n    return null;\n  }\n  return (\n    <SelectPrimitive.ScrollUpButton\n      className={cn('flex cursor-default items-center justify-center py-1', className)}\n      {...props}\n    >\n      <Icon as={ChevronUpIcon} className='size-4' />\n    </SelectPrimitive.ScrollUpButton>\n  );\n}\n\n/**\n * @platform Web only\n * Returns null on native platforms\n */\nfunction SelectScrollDownButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {\n  if (Platform.OS !== 'web') {\n    return null;\n  }\n  return (\n    <SelectPrimitive.ScrollDownButton\n      className={cn('flex cursor-default items-center justify-center py-1', className)}\n      {...props}\n    >\n      <Icon as={ChevronDownIcon} className='size-4' />\n    </SelectPrimitive.ScrollDownButton>\n  );\n}\n\n/**\n * @platform Native only\n * Returns the children on the web\n */\nfunction NativeSelectScrollView({ className, ...props }: React.ComponentProps<typeof ScrollView>) {\n  if (Platform.OS === 'web') {\n    return <>{props.children}</>;\n  }\n  return <ScrollView className={cn('max-h-52', className)} {...props} />;\n}\n\nexport {\n  NativeSelectScrollView,\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectLabel,\n  SelectScrollDownButton,\n  SelectScrollUpButton,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n  type Option,\n};\n",
      "type": "registry:ui"
    }
  ]
}