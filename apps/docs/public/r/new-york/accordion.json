{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "accordion",
  "type": "registry:ui",
  "title": "Accordion",
  "author": "@mrzachnugent",
  "description": "A vertically stacked set of interactive headings that each reveal a section of content.",
  "dependencies": [
    "@rn-primitives/accordion"
  ],
  "registryDependencies": [
    "https://reactnativereusable.com/r/new-york/text.json",
    "https://reactnativereusable.com/r/new-york/icon.json"
  ],
  "files": [
    {
      "path": "./node_modules/@rnr/registry/src/new-york/components/ui/accordion.tsx",
      "content": "'use client';\n\nimport { Icon } from '@/registry/new-york/components/ui/icon';\nimport { TextClassContext } from '@/registry/new-york/components/ui/text';\nimport { cn } from '@/registry/new-york/lib/utils';\nimport * as AccordionPrimitive from '@rn-primitives/accordion';\nimport { ChevronDown } from 'lucide-react-native';\nimport * as React from 'react';\nimport { Platform, Pressable, View } from 'react-native';\nimport Animated, {\n  FadeOutUp,\n  LayoutAnimationConfig,\n  LinearTransition,\n  useAnimatedStyle,\n  useDerivedValue,\n  withTiming,\n} from 'react-native-reanimated';\n\nfunction Accordion({\n  children,\n  ...props\n}: Omit<AccordionPrimitive.RootProps, 'asChild'> & {\n  ref?: React.RefObject<AccordionPrimitive.RootRef | null>;\n}) {\n  return (\n    <LayoutAnimationConfig skipEntering>\n      <AccordionPrimitive.Root\n        {...(props as AccordionPrimitive.RootProps)}\n        asChild={Platform.OS !== 'web'}>\n        <Animated.View layout={LinearTransition.duration(200)}>{children}</Animated.View>\n      </AccordionPrimitive.Root>\n    </LayoutAnimationConfig>\n  );\n}\n\nfunction AccordionItem({\n  children,\n  className,\n  value,\n  ...props\n}: AccordionPrimitive.ItemProps & {\n  ref?: React.RefObject<AccordionPrimitive.ItemRef | null>;\n}) {\n  return (\n    <AccordionPrimitive.Item\n      className={cn(\n        'border-border border-b',\n        Platform.select({ web: 'last:border-b-0' }),\n        className\n      )}\n      value={value}\n      asChild\n      {...props}>\n      <Animated.View\n        className=\"native:overflow-hidden\"\n        layout={Platform.select({ native: LinearTransition.duration(200) })}>\n        {children}\n      </Animated.View>\n    </AccordionPrimitive.Item>\n  );\n}\n\nconst Trigger = Platform.OS === 'web' ? View : Pressable;\n\nfunction AccordionTrigger({\n  className,\n  children,\n  ...props\n}: AccordionPrimitive.TriggerProps & {\n  children?: React.ReactNode;\n  ref?: React.RefObject<AccordionPrimitive.TriggerRef | null>;\n}) {\n  const { isExpanded } = AccordionPrimitive.useItemContext();\n\n  const progress = useDerivedValue(\n    () => (isExpanded ? withTiming(1, { duration: 250 }) : withTiming(0, { duration: 200 })),\n    [isExpanded]\n  );\n  const chevronStyle = useAnimatedStyle(\n    () => ({\n      transform: [{ rotate: `${progress.value * 180}deg` }],\n    }),\n    [progress]\n  );\n\n  return (\n    <TextClassContext.Provider\n      value={cn(\n        'text-left text-sm font-medium',\n        Platform.select({ web: 'group-hover:underline' })\n      )}>\n      <AccordionPrimitive.Header>\n        <AccordionPrimitive.Trigger {...props} asChild>\n          <Trigger\n            className={cn(\n              'flex-row items-start justify-between gap-4 rounded-md py-4 disabled:opacity-50',\n              Platform.select({\n                web: 'focus-visible:border-ring focus-visible:ring-ring/50 flex flex-1 outline-none transition-all hover:underline focus-visible:ring-[3px] disabled:pointer-events-none [&[data-state=open]>svg]:rotate-180',\n              }),\n              className\n            )}>\n            <>{children}</>\n            <Animated.View style={chevronStyle}>\n              <Icon\n                as={ChevronDown}\n                size={16}\n                className={cn(\n                  'text-muted-foreground shrink-0',\n                  Platform.select({\n                    web: 'pointer-events-none translate-y-0.5 transition-transform duration-200',\n                  })\n                )}\n              />\n            </Animated.View>\n          </Trigger>\n        </AccordionPrimitive.Trigger>\n      </AccordionPrimitive.Header>\n    </TextClassContext.Provider>\n  );\n}\n\nfunction AccordionContent({\n  className,\n  children,\n  ...props\n}: AccordionPrimitive.ContentProps & {\n  ref?: React.RefObject<AccordionPrimitive.ContentRef | null>;\n}) {\n  const { isExpanded } = AccordionPrimitive.useItemContext();\n  return (\n    <TextClassContext.Provider value=\"text-sm\">\n      <AccordionPrimitive.Content\n        className={cn(\n          'overflow-hidden',\n          Platform.select({\n            web: isExpanded ? 'animate-accordion-down' : 'animate-accordion-up',\n          })\n        )}\n        {...props}>\n        <Animated.View\n          exiting={Platform.select({ native: FadeOutUp.duration(200) })}\n          className={cn('pb-4', className)}>\n          {children}\n        </Animated.View>\n      </AccordionPrimitive.Content>\n    </TextClassContext.Provider>\n  );\n}\n\nexport { Accordion, AccordionContent, AccordionItem, AccordionTrigger };\n",
      "type": "registry:ui"
    }
  ]
}