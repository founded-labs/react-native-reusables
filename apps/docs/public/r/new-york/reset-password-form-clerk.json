{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "reset-password-form-clerk",
  "type": "registry:component",
  "title": "Reset Password Form (Clerk)",
  "author": "@mrzachnugent",
  "description": "A form for resetting a password with an OTP sent via email with Clerk integration.",
  "dependencies": [
    "@clerk/clerk-expo"
  ],
  "registryDependencies": [
    "https://reactnativereusables.com/r/new-york/button.json",
    "https://reactnativereusables.com/r/new-york/card.json",
    "https://reactnativereusables.com/r/new-york/input.json",
    "https://reactnativereusables.com/r/new-york/label.json",
    "https://reactnativereusables.com/r/new-york/text.json"
  ],
  "files": [
    {
      "path": "./node_modules/@rnr/registry/src/blocks/clerk/reset-password-form.tsx",
      "content": "import { Button } from '@/registry/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/registry/ui/card';\nimport { Input } from '@/registry/ui/input';\nimport { Label } from '@/registry/ui/label';\nimport { Text } from '@/registry/ui/text';\nimport { useSignIn } from '@clerk/clerk-expo';\nimport * as React from 'react';\nimport { TextInput, View } from 'react-native';\n\nexport function ResetPasswordForm() {\n  const { signIn, setActive, isLoaded } = useSignIn();\n  const [password, setPassword] = React.useState('');\n  const [code, setCode] = React.useState('');\n  const codeInputRef = React.useRef<TextInput>(null);\n  const [error, setError] = React.useState({ code: '', password: '' });\n\n  async function onSubmit() {\n    if (!isLoaded) {\n      return;\n    }\n    try {\n      const result = await signIn?.attemptFirstFactor({\n        strategy: 'reset_password_email_code',\n        code,\n        password,\n      });\n\n      if (result.status === 'complete') {\n        // Set the active session to\n        // the newly created session (user is now signed in)\n        setActive({ session: result.createdSessionId });\n        // TODO: If your app does not use `Stack.Protected`, navigate to your protected screen\n        return;\n      }\n      // TODO: Handle other statuses\n    } catch (err) {\n      // See https://go.clerk.com/mRUDrIe for more info on error handling\n      if (err instanceof Error) {\n        const isPasswordMessage = err.message.toLowerCase().includes('password');\n        setError({ code: '', password: isPasswordMessage ? err.message : '' });\n        return;\n      }\n      console.error(JSON.stringify(err, null, 2));\n    }\n  }\n\n  function onPasswordSubmitEditing() {\n    codeInputRef.current?.focus();\n  }\n\n  return (\n    <View className=\"gap-6\">\n      <Card className=\"border-border/0 sm:border-border shadow-none sm:shadow-sm sm:shadow-black/5\">\n        <CardHeader>\n          <CardTitle className=\"text-center text-xl sm:text-left\">Reset password</CardTitle>\n          <CardDescription className=\"text-center sm:text-left\">\n            Enter the code sent to your email and set a new password\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"gap-6\">\n          <View className=\"gap-6\">\n            <View className=\"gap-1.5\">\n              <View className=\"flex-row items-center\">\n                <Label htmlFor=\"password\">New password</Label>\n              </View>\n              <Input\n                id=\"password\"\n                secureTextEntry\n                onChangeText={setPassword}\n                returnKeyType=\"next\"\n                submitBehavior=\"submit\"\n                onSubmitEditing={onPasswordSubmitEditing}\n              />\n              {error.password ? (\n                <Text className=\"text-destructive text-sm font-medium\">{error.password}</Text>\n              ) : null}\n            </View>\n            <View className=\"gap-1.5\">\n              <Label htmlFor=\"code\">Verification code</Label>\n              <Input\n                id=\"code\"\n                autoCapitalize=\"none\"\n                onChangeText={setCode}\n                returnKeyType=\"send\"\n                keyboardType=\"numeric\"\n                autoComplete=\"sms-otp\"\n                textContentType=\"oneTimeCode\"\n                onSubmitEditing={onSubmit}\n              />\n              {error.code ? (\n                <Text className=\"text-destructive text-sm font-medium\">{error.code}</Text>\n              ) : null}\n            </View>\n            <Button className=\"w-full\" onPress={onSubmit}>\n              <Text>Reset Password</Text>\n            </Button>\n          </View>\n        </CardContent>\n      </Card>\n    </View>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}